{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "logicAppName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 80,
      "metadata": {
        "description": "Name of the Logic App."
      }
    },
    "logicAppLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": [
        "[resourceGroup().location]",
        "eastasia",
        "southeastasia",
        "centralus",
        "eastus",
        "eastus2",
        "westus",
        "northcentralus",
        "southcentralus",
        "northeurope",
        "westeurope",
        "japanwest",
        "japaneast",
        "brazilsouth",
        "australiaeast",
        "australiasoutheast",
        "southindia",
        "centralindia",
        "westindia",
        "canadacentral",
        "canadaeast",
        "uksouth",
        "ukwest",
        "westcentralus",
        "westus2"
      ],
      "metadata": {
        "description": "Location of the Logic App."
      }
    },
    "faceapi_1_Connection_Name": {
      "type": "string",
      "defaultValue": "faceapi"
    },
    "faceapi_1_Connection_DisplayName": {
      "type": "string",
      "defaultValue": "BitFaceApi"
    },
    "faceapi_1_apiKey": {
      "type": "securestring",
      "metadata": {
        "description": "API Key"
      }
    },
    "faceapi_1_siteUrl": {
      "type": "string",
      "metadata": {
        "description": "Root site url (Example: https://westus.api.cognitive.microsoft.com ).If not specified site url will be defaulted to 'https://westus.api.cognitive.microsoft.com'."
      },
      "defaultValue": "https://westus2.api.cognitive.microsoft.com/face/v1.0"
    },
    "twitter_1_Connection_Name": {
      "type": "string",
      "defaultValue": "twitter"
    },
    "twitter_1_Connection_DisplayName": {
      "type": "string",
      "defaultValue": "BitWhere"
    },
    "azureblob_1_Connection_Name": {
      "type": "string",
      "defaultValue": "azureblob"
    },
    "azureblob_1_Connection_DisplayName": {
      "type": "string",
      "defaultValue": "BitStorage"
    },
    "azureblob_1_accountName": {
      "type": "string",
      "metadata": {
        "description": "Name of the storage account the connector should use."
      },
      "defaultValue": "whereisbitdev01"
    },
    "azureblob_1_accessKey": {
      "type": "securestring",
      "metadata": {
        "description": "Specify a valid primary/secondary storage account access key."
      }
    },
    "documentdb_1_Connection_Name": {
      "type": "string",
      "defaultValue": "documentdb"
    },
    "documentdb_1_Connection_DisplayName": {
      "type": "string",
      "defaultValue": "BitCoreCosmos"
    },
    "documentdb_1_databaseAccount": {
      "type": "string",
      "metadata": {
        "description": "Name of the account without 'documents.azure.com' part"
      },
      "defaultValue": "whereisbitdev"
    },
    "documentdb_1_accessKey": {
      "type": "securestring",
      "metadata": {
        "description": "Primary or Secondary Key"
      }
    }
  },
  "variables": {},
  "resources": [
    {
      "name": "[parameters('logicAppName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('logicAppLocation')]",
      "tags": {
        "displayName": "LogicApp"
      },
      "apiVersion": "2016-06-01",
      "properties": {
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "Initialise_Request_Unique_Identifier_variable": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "RequestIdentifier",
                    "type": "String",
                    "value": "@{guid()}"
                  }
                ]
              },
              "runAfter": {
                "Initialize_variable": [
                  "Succeeded"
                ]
              }
            },
            "Check_if_tweet_has_at_least_one_media_item": {
              "type": "If",
              "expression": {
                "and": [
                  {
                    "greaterOrEquals": [
                      "@length(triggerBody()?['MediaUrls'])",
                      1
                    ]
                  }
                ]
              },
              "actions": {
                "For_each": {
                  "type": "Foreach",
                  "foreach": "@triggerBody()?['MediaUrls']",
                  "actions": {
                    "Add_a_person_face": {
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['faceapi']['connectionId']"
                          }
                        },
                        "method": "post",
                        "body": {
                          "url": "@{items('For_each')}"
                        },
                        "path": "/face/v1.0/persongroups/@{encodeURIComponent('swtestgroup01')}/persons/@{encodeURIComponent(variables('UserPersonId'))}/persistedFaces",
                        "queries": {
                          "userData": "@{triggerBody()?['UserDetails']?['UserName']}@{triggerBody()?['UserDetails']?['Description']}@{variables('RequestIdentifier')}"
                        }
                      },
                      "runAfter": {
                        "Set_variable": [
                          "Succeeded"
                        ]
                      }
                    },
                    "Set_variable": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "UploadedFaceFileName",
                        "value": "@{substring(items('For_each'),add(lastIndexOf(items('For_each'), '/'),1),19)}"
                      },
                      "runAfter": {}
                    },
                    "Write_image_log_to_DB": {
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['documentdb']['connectionId']"
                          }
                        },
                        "method": "post",
                        "body": "@outputs('Build_image_log_message')",
                        "path": "/dbs/@{encodeURIComponent('bitcore')}/colls/@{encodeURIComponent('regourls')}/docs"
                      },
                      "runAfter": {
                        "Build_image_log_message": [
                          "Succeeded"
                        ]
                      }
                    },
                    "Build_image_log_message": {
                      "type": "Compose",
                      "inputs": {
                        "reqid": "@{variables('RequestIdentifier')}",
                        "userid": "@{triggerBody()?['UserDetails']?['UserName']}",
                        "id": "@{body('Add_a_person_face')?['persistedFaceId']}",
                        "imgurl": "@{items('For_each')}"
                      },
                      "runAfter": {
                        "Add_a_person_face": [
                          "Succeeded"
                        ]
                      }
                    }
                  },
                  "runAfter": {
                    "Did_we_find_a_registration_record_for_the_user": [
                      "Succeeded"
                    ]
                  },
                  "description": "Process each media item provided in the tweet and add it as a face entry for the \"person\" we created previously."
                },
                "See_if_user_is_already_registered": {
                  "type": "ApiConnection",
                  "inputs": {
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['documentdb']['connectionId']"
                      }
                    },
                    "method": "get",
                    "path": "/dbs/@{encodeURIComponent('bitcore')}/colls/@{encodeURIComponent('registeredusers')}/docs/@{encodeURIComponent(triggerBody()?['UserDetails']?['UserName'])}"
                  },
                  "runAfter": {}
                },
                "Did_we_find_a_registration_record_for_the_user": {
                  "type": "If",
                  "expression": {
                    "and": [
                      {
                        "not": {
                          "equals": [
                            "@actions('See_if_user_is_already_registered')['status']",
                            "Failed"
                          ]
                        }
                      }
                    ]
                  },
                  "actions": {
                    "Parse_JSON": {
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('See_if_user_is_already_registered')",
                        "schema": {
                          "type": "object",
                          "properties": {
                            "_self": {
                              "type": "string"
                            },
                            "confirmed": {
                              "type": "boolean"
                            },
                            "personid": {
                              "type": "string"
                            },
                            "_rid": {
                              "type": "string"
                            },
                            "_etag": {
                              "type": "string"
                            },
                            "reqid": {
                              "type": "string"
                            },
                            "_attachments": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "_ts": {
                              "type": "integer"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Set_variable_2": [
                          "Succeeded"
                        ]
                      }
                    },
                    "Set_Person_ID_from_existing_DB_entry": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "UserPersonId",
                        "value": "@body('Parse_JSON')?['personid']"
                      },
                      "runAfter": {
                        "Parse_JSON": [
                          "Succeeded"
                        ]
                      }
                    },
                    "Set_variable_2": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "ExistingUser",
                        "value": "@true"
                      },
                      "runAfter": {}
                    }
                  },
                  "runAfter": {
                    "See_if_user_is_already_registered": [
                      "Succeeded"
                    ]
                  },
                  "else": {
                    "actions": {
                      "Create_a_person": {
                        "type": "ApiConnection",
                        "inputs": {
                          "host": {
                            "connection": {
                              "name": "@parameters('$connections')['faceapi']['connectionId']"
                            }
                          },
                          "method": "post",
                          "body": {
                            "name": "@triggerBody()?['UserDetails']?['UserName']",
                            "userData": "@{triggerBody()?['UserDetails']?['Description']}@{variables('RequestIdentifier')}"
                          },
                          "path": "/face/v1.0/persongroups/@{encodeURIComponent('swtestgroup01')}/persons"
                        },
                        "runAfter": {}
                      },
                      "Create_registered_user_record": {
                        "type": "Compose",
                        "inputs": {
                          "personid": "@{body('Create_a_person')?['personId']}",
                          "id": "@{triggerBody()?['UserDetails']?['UserName']}",
                          "confirmed": "@false",
                          "reqid": "@{variables('RequestIdentifier')}"
                        },
                        "runAfter": {
                          "Set_Person_ID_from_Face_API": [
                            "Succeeded"
                          ]
                        }
                      },
                      "Save_new_user_record_to_DB": {
                        "type": "ApiConnection",
                        "inputs": {
                          "host": {
                            "connection": {
                              "name": "@parameters('$connections')['documentdb']['connectionId']"
                            }
                          },
                          "method": "post",
                          "body": "@outputs('Create_registered_user_record')",
                          "headers": {
                            "x-ms-documentdb-is-upsert": true
                          },
                          "path": "/dbs/@{encodeURIComponent('bitcore')}/colls/@{encodeURIComponent('registeredusers')}/docs"
                        },
                        "runAfter": {
                          "Create_registered_user_record": [
                            "Succeeded"
                          ]
                        }
                      },
                      "Set_Person_ID_from_Face_API": {
                        "type": "SetVariable",
                        "inputs": {
                          "name": "UserPersonId",
                          "value": "@body('Create_a_person')?['personId']"
                        },
                        "runAfter": {
                          "Create_a_person": [
                            "Succeeded"
                          ]
                        }
                      }
                    }
                  }
                },
                "Compose_2": {
                  "type": "Compose",
                  "inputs": {
                    "id": "@{variables('RequestIdentifier')}",
                    "postedby": "@{triggerBody()?['UserDetails']?['UserName']}",
                    "postbody": "@{triggerBody()?['TweetText']}",
                    "message": "Success",
                    "existinguser": "@{variables('ExistingUser')}",
                    "success": "@{true}"
                  },
                  "runAfter": {
                    "For_each": [
                      "Succeeded"
                    ]
                  }
                },
                "Write_rego_attempt_log_to_DB": {
                  "type": "ApiConnection",
                  "inputs": {
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['documentdb']['connectionId']"
                      }
                    },
                    "method": "post",
                    "body": "@outputs('Compose_2')",
                    "path": "/dbs/@{encodeURIComponent('bitcore')}/colls/@{encodeURIComponent('regoattempts')}/docs"
                  },
                  "runAfter": {
                    "Compose_2": [
                      "Succeeded"
                    ]
                  }
                }
              },
              "runAfter": {
                "Initialise_Person_ID_variable": [
                  "Succeeded"
                ]
              },
              "else": {
                "actions": {
                  "Compose": {
                    "type": "Compose",
                    "inputs": {
                      "id": "@{variables('RequestIdentifier')}",
                      "postedby": "@{triggerBody()?['UserDetails']?['UserName']}",
                      "postbody": "@{triggerBody()?['TweetText']}",
                      "message": "No media items in rego tweet",
                      "existinguser": "",
                      "success": "@{false}"
                    },
                    "runAfter": {}
                  },
                  "Write_failed_rego_attempt_log_to_DB": {
                    "type": "ApiConnection",
                    "inputs": {
                      "host": {
                        "connection": {
                          "name": "@parameters('$connections')['documentdb']['connectionId']"
                        }
                      },
                      "method": "post",
                      "body": "@outputs('Compose')",
                      "path": "/dbs/@{encodeURIComponent('bitcore')}/colls/@{encodeURIComponent('regoattempts')}/docs"
                    },
                    "runAfter": {
                      "Compose": [
                        "Succeeded"
                      ]
                    }
                  }
                }
              }
            },
            "Initialise_Face_File_name_variable": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "UploadedFaceFileName",
                    "type": "String"
                  }
                ]
              },
              "runAfter": {
                "Initialise_Request_Unique_Identifier_variable": [
                  "Succeeded"
                ]
              }
            },
            "Initialise_Person_ID_variable": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "UserPersonId",
                    "type": "String"
                  }
                ]
              },
              "runAfter": {
                "Initialise_Face_File_name_variable": [
                  "Succeeded"
                ]
              }
            },
            "Initialize_variable": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ExistingUser",
                    "type": "Boolean",
                    "value": "@false"
                  }
                ]
              },
              "runAfter": {}
            }
          },
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "When_a_new_tweet_is_posted": {
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['twitter_1']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/onnewtweet",
                "queries": {
                  "searchQuery": "#PlayFindBit"
                }
              },
              "recurrence": {
                "frequency": "Second",
                "interval": 30
              },
              "splitOn": "@triggerBody()?['value']"
            }
          },
          "contentVersion": "1.0.0.0",
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "faceapi": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('logicAppLocation'), '/managedApis/', 'faceapi')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('faceapi_1_Connection_Name'))]",
                "connectionName": "[parameters('faceapi_1_Connection_Name')]"
              },
              "documentdb": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('logicAppLocation'), '/managedApis/', 'documentdb')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('documentdb_1_Connection_Name'))]",
                "connectionName": "[parameters('documentdb_1_Connection_Name')]"
              },
              "twitter_1": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('logicAppLocation'), '/managedApis/', 'twitter')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('twitter_1_Connection_Name'))]",
                "connectionName": "[parameters('twitter_1_Connection_Name')]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', parameters('faceapi_1_Connection_Name'))]",
        "[resourceId('Microsoft.Web/connections', parameters('documentdb_1_Connection_Name'))]",
        "[resourceId('Microsoft.Web/connections', parameters('twitter_1_Connection_Name'))]"
      ]
    },
    {
      "type": "MICROSOFT.WEB/CONNECTIONS",
      "apiVersion": "2016-06-01",
      "name": "[parameters('faceapi_1_Connection_Name')]",
      "location": "[parameters('logicAppLocation')]",
      "properties": {
        "api": {
          "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('logicAppLocation'), '/managedApis/', 'faceapi')]"
        },
        "displayName": "[parameters('faceapi_1_Connection_DisplayName')]",
        "parameterValues": {
          "apiKey": "[parameters('faceapi_1_apiKey')]",
          "siteUrl": "[parameters('faceapi_1_siteUrl')]"
        }
      }
    },
    {
      "type": "MICROSOFT.WEB/CONNECTIONS",
      "apiVersion": "2016-06-01",
      "name": "[parameters('twitter_1_Connection_Name')]",
      "location": "[parameters('logicAppLocation')]",
      "properties": {
        "api": {
          "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('logicAppLocation'), '/managedApis/', 'twitter')]"
        },
        "displayName": "[parameters('twitter_1_Connection_DisplayName')]"
      }
    },
    {
      "type": "MICROSOFT.WEB/CONNECTIONS",
      "apiVersion": "2016-06-01",
      "name": "[parameters('azureblob_1_Connection_Name')]",
      "location": "[parameters('logicAppLocation')]",
      "properties": {
        "api": {
          "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('logicAppLocation'), '/managedApis/', 'azureblob')]"
        },
        "displayName": "[parameters('azureblob_1_Connection_DisplayName')]",
        "parameterValues": {
          "accountName": "[parameters('azureblob_1_accountName')]",
          "accessKey": "[parameters('azureblob_1_accessKey')]"
        }
      }
    },
    {
      "type": "MICROSOFT.WEB/CONNECTIONS",
      "apiVersion": "2016-06-01",
      "name": "[parameters('documentdb_1_Connection_Name')]",
      "location": "[parameters('logicAppLocation')]",
      "properties": {
        "api": {
          "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('logicAppLocation'), '/managedApis/', 'documentdb')]"
        },
        "displayName": "[parameters('documentdb_1_Connection_DisplayName')]",
        "parameterValues": {
          "databaseAccount": "[parameters('documentdb_1_databaseAccount')]",
          "accessKey": "[parameters('documentdb_1_accessKey')]"
        }
      }
    }
  ],
  "outputs": {}
}