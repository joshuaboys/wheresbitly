{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "logicAppName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 80,
      "metadata": {
        "description": "Name of the Logic App."
      }
    },
    "logicAppLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": [
        "[resourceGroup().location]",
        "eastasia",
        "southeastasia",
        "centralus",
        "eastus",
        "eastus2",
        "westus",
        "northcentralus",
        "southcentralus",
        "northeurope",
        "westeurope",
        "japanwest",
        "japaneast",
        "brazilsouth",
        "australiaeast",
        "australiasoutheast",
        "southindia",
        "centralindia",
        "westindia",
        "canadacentral",
        "canadaeast",
        "uksouth",
        "ukwest",
        "westcentralus",
        "westus2"
      ],
      "metadata": {
        "description": "Location of the Logic App."
      }
    },
    "twitter_1_Connection_Name": {
      "type": "string",
      "defaultValue": "twitter"
    },
    "twitter_1_Connection_DisplayName": {
      "type": "string",
      "defaultValue": "BitWhere"
    },
    "documentdb_1_Connection_Name": {
      "type": "string",
      "defaultValue": "documentdb"
    },
    "documentdb_1_Connection_DisplayName": {
      "type": "string",
      "defaultValue": "BitCoreCosmos"
    },
    "documentdb_1_databaseAccount": {
      "type": "string",
      "metadata": {
        "description": "Name of the account without 'documents.azure.com' part"
      },
      "defaultValue": "whereisbitdev"
    },
    "documentdb_1_accessKey": {
      "type": "securestring",
      "metadata": {
        "description": "Primary or Secondary Key"
      }
    },
    "azureblob_1_Connection_Name": {
      "type": "string",
      "defaultValue": "azureblob"
    },
    "azureblob_1_Connection_DisplayName": {
      "type": "string",
      "defaultValue": "BitStorage"
    },
    "azureblob_1_accountName": {
      "type": "string",
      "metadata": {
        "description": "Name of the storage account the connector should use."
      },
      "defaultValue": "whereisbitdev01"
    },
    "azureblob_1_accessKey": {
      "type": "securestring",
      "metadata": {
        "description": "Specify a valid primary/secondary storage account access key."
      }
    },
    "faceapi_1_Connection_Name": {
      "type": "string",
      "defaultValue": "faceapi"
    },
    "faceapi_1_Connection_DisplayName": {
      "type": "string",
      "defaultValue": "BitFaceApi"
    },
    "faceapi_1_apiKey": {
      "type": "securestring",
      "metadata": {
        "description": "API Key"
      }
    },
    "faceapi_1_siteUrl": {
      "type": "string",
      "metadata": {
        "description": "Root site url (Example: https://westus.api.cognitive.microsoft.com ).If not specified site url will be defaulted to 'https://westus.api.cognitive.microsoft.com'."
      },
      "defaultValue": "https://westus2.api.cognitive.microsoft.com/face/v1.0"
    },
    "servicebus_1_Connection_Name": {
      "type": "string",
      "defaultValue": "servicebus-1"
    },
    "servicebus_1_Connection_DisplayName": {
      "type": "string",
      "defaultValue": "bitservicebus"
    },
    "servicebus_1_connectionString": {
      "type": "securestring",
      "metadata": {
        "description": "Azure Service Bus Connection String"
      }
    }
  },
  "variables": {},
  "resources": [
    {
      "name": "[parameters('logicAppName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('logicAppLocation')]",
      "tags": {
        "displayName": "LogicApp"
      },
      "apiVersion": "2016-06-01",
      "properties": {
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "Check_that_Tweet_contains_at_most_one_media_item": {
              "type": "If",
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@length(triggerBody()?['MediaUrls'])",
                      1
                    ]
                  }
                ]
              },
              "actions": {
                "Try_and_find_user_in_registration_database": {
                  "type": "ApiConnection",
                  "inputs": {
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['documentdb']['connectionId']"
                      }
                    },
                    "method": "get",
                    "headers": {
                      "x-ms-max-item-count": 1
                    },
                    "path": "/dbs/@{encodeURIComponent('bitcore')}/colls/@{encodeURIComponent('registeredusers')}/docs/@{encodeURIComponent(triggerBody()?['UserDetails']?['UserName'])}"
                  },
                  "runAfter": {}
                },
                "Did_lookup_succeed": {
                  "type": "If",
                  "expression": {
                    "and": [
                      {
                        "not": {
                          "equals": [
                            "@actions('Try_and_find_user_in_registration_database')['status']",
                            "Failed"
                          ]
                        }
                      }
                    ]
                  },
                  "actions": {
                    "Check_that_the_user_is_allowed_to_play_the_game": {
                      "type": "If",
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_JSON_3')?['confirmed']",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "actions": {
                        "Set_Media_URL_variable": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "TweetMediaURL",
                            "value": "@{first(triggerBody()?['MediaUrls'])}"
                          },
                          "runAfter": {}
                        },
                        "Load_game_configuration": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['documentdb']['connectionId']"
                              }
                            },
                            "method": "get",
                            "headers": {
                              "x-ms-max-item-count": 1
                            },
                            "path": "/dbs/@{encodeURIComponent('bitcore')}/colls/@{encodeURIComponent('compconfig')}/docs/@{encodeURIComponent('bitactive')}"
                          },
                          "runAfter": {
                            "Set_Media_URL_variable": [
                              "Succeeded"
                            ]
                          }
                        },
                        "Parse_JSON": {
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('Load_game_configuration')",
                            "schema": {
                              "type": "object",
                              "properties": {
                                "_self": {
                                  "type": "string"
                                },
                                "_rid": {
                                  "type": "string"
                                },
                                "_attachments": {
                                  "type": "string"
                                },
                                "persongroupid": {
                                  "type": "string"
                                },
                                "id": {
                                  "type": "string"
                                },
                                "activeevent": {
                                  "type": "string"
                                },
                                "activetier": {
                                  "type": "integer"
                                },
                                "_etag": {
                                  "type": "string"
                                },
                                "_ts": {
                                  "type": "integer"
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "Load_game_configuration": [
                              "Succeeded"
                            ]
                          }
                        },
                        "Check_if_entry_is_for_the_current_active_level_of_the_game": {
                          "type": "If",
                          "expression": {
                            "and": [
                              {
                                "contains": [
                                  "@triggerBody()?['TweetText']",
                                  "@concat('#Byte', string(body('Parse_JSON')?['activetier']))"
                                ]
                              }
                            ]
                          },
                          "actions": {
                            "Load_person_'name'_for_the_user_selected_as_Bit": {
                              "type": "ApiConnection",
                              "inputs": {
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['documentdb']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "body": {
                                  "query": "select * from c where c.byteround = @{body('Parse_JSON')?['activetier']}"
                                },
                                "headers": {
                                  "x-ms-max-item-count": 1
                                },
                                "path": "/dbs/@{encodeURIComponent('bitcore')}/colls/@{encodeURIComponent('registeredusers')}/query"
                              },
                              "runAfter": {}
                            },
                            "For_each_2": {
                              "type": "Foreach",
                              "foreach": "@body('Load_person_''name''_for_the_user_selected_as_Bit')?['Documents']",
                              "actions": {
                                "Parse_JSON_2": {
                                  "type": "ParseJson",
                                  "inputs": {
                                    "content": "@items('For_each_2')",
                                    "schema": {
                                      "type": "object",
                                      "properties": {
                                        "personid": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "string"
                                        },
                                        "confirmed": {
                                          "type": "boolean"
                                        },
                                        "byteround": {
                                          "type": "integer"
                                        },
                                        "reqid": {
                                          "type": "string"
                                        },
                                        "_rid": {
                                          "type": "string"
                                        },
                                        "_self": {
                                          "type": "string"
                                        },
                                        "_etag": {
                                          "type": "string"
                                        },
                                        "_attachments": {
                                          "type": "string"
                                        },
                                        "_ts": {
                                          "type": "integer"
                                        }
                                      }
                                    }
                                  },
                                  "runAfter": {}
                                },
                                "Detect_faces": {
                                  "type": "ApiConnection",
                                  "inputs": {
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['faceapi']['connectionId']"
                                      }
                                    },
                                    "method": "post",
                                    "body": {
                                      "url": "@variables('TweetMediaURL')"
                                    },
                                    "path": "/face/v1.0/detect",
                                    "queries": {
                                      "returnFaceId": "true",
                                      "returnFaceAttributes": "age,gender,headPose,smile,facialHair,glasses",
                                      "returnFaceLandmarks": "true"
                                    }
                                  },
                                  "runAfter": {
                                    "Set_variable": [
                                      "Succeeded"
                                    ]
                                  }
                                },
                                "For_each": {
                                  "type": "Foreach",
                                  "foreach": "@body('Detect_faces')",
                                  "actions": {
                                    "Find_person_from_face": {
                                      "type": "ApiConnection",
                                      "inputs": {
                                        "host": {
                                          "connection": {
                                            "name": "@parameters('$connections')['faceapi']['connectionId']"
                                          }
                                        },
                                        "method": "post",
                                        "body": {
                                          "faceId": "@items('For_each')?['faceId']",
                                          "personGroupId": "@body('Parse_JSON')?['persongroupid']",
                                          "personId": "@body('Parse_JSON_2')?['personid']"
                                        },
                                        "path": "/face/v1.0/verify"
                                      },
                                      "runAfter": {}
                                    },
                                    "Condition": {
                                      "type": "If",
                                      "expression": {
                                        "and": [
                                          {
                                            "equals": [
                                              "@body('Find_person_from_face')?['isIdentical']",
                                              "@true"
                                            ]
                                          }
                                        ]
                                      },
                                      "actions": {
                                        "Build_message_body_to_send_via_Service_Bus_Queue": {
                                          "type": "Compose",
                                          "inputs": {
                                            "reqid": "@{variables('RequestIdentifier')}",
                                            "finder": "@{triggerBody()?['UserDetails']?['UserName']}",
                                            "bit": "@{variables('BitUserId')}",
                                            "gamelevel": "@{body('Parse_JSON')?['activetier']}"
                                          },
                                          "runAfter": {}
                                        },
                                        "Send_winning_match_message": {
                                          "type": "ApiConnection",
                                          "inputs": {
                                            "host": {
                                              "connection": {
                                                "name": "@parameters('$connections')['servicebus_1']['connectionId']"
                                              }
                                            },
                                            "method": "post",
                                            "body": {
                                              "ContentData": "@{base64(outputs('Build_message_body_to_send_via_Service_Bus_Queue'))}",
                                              "ContentType": "application/json"
                                            },
                                            "path": "/@{encodeURIComponent(encodeURIComponent('compwinners'))}/messages",
                                            "queries": {
                                              "systemProperties": "None"
                                            }
                                          },
                                          "runAfter": {
                                            "Build_message_body_to_send_via_Service_Bus_Queue": [
                                              "Succeeded"
                                            ]
                                          }
                                        },
                                        "Build_winner_log_message": {
                                          "type": "Compose",
                                          "inputs": {
                                            "id": "@{guid()}",
                                            "reqid": "@{variables('RequestIdentifier')}",
                                            "postedby": "@{triggerBody()?['UserDetails']?['UserName']}",
                                            "postbody": "@{triggerBody()?['TweetText']}",
                                            "bit": "@{variables('BitUserId')}",
                                            "gamelevel": "@{body('Parse_JSON')?['activetier']}",
                                            "status": "matched_bitly"
                                          },
                                          "runAfter": {
                                            "Send_winning_match_message": [
                                              "Succeeded"
                                            ]
                                          }
                                        }
                                      },
                                      "runAfter": {
                                        "Find_person_from_face": [
                                          "Succeeded"
                                        ]
                                      },
                                      "else": {
                                        "actions": {
                                          "Build_log_message_for_no_match": {
                                            "type": "Compose",
                                            "inputs": {
                                              "id": "@{guid()}",
                                              "reqid": "@{variables('RequestIdentifier')}",
                                              "postedby": "@{triggerBody()?['UserDetails']?['UserName']}",
                                              "postbody": "@{triggerBody()?['TweetText']}",
                                              "status": "no_face_match",
                                              "confidencelevel": "@body('Find_person_from_face')?['confidence']"
                                            },
                                            "runAfter": {}
                                          },
                                          "Write_no_match_log_message_to_DB": {
                                            "type": "ApiConnection",
                                            "inputs": {
                                              "host": {
                                                "connection": {
                                                  "name": "@parameters('$connections')['documentdb']['connectionId']"
                                                }
                                              },
                                              "method": "post",
                                              "body": "@outputs('Build_log_message_for_no_match')",
                                              "path": "/dbs/@{encodeURIComponent('bitcore')}/colls/@{encodeURIComponent('playattempts')}/docs"
                                            },
                                            "runAfter": {
                                              "Build_log_message_for_no_match": [
                                                "Succeeded"
                                              ]
                                            }
                                          }
                                        }
                                      },
                                      "description": "Is Identitical set to 'true' if confidence level is greater than 50%"
                                    }
                                  },
                                  "runAfter": {
                                    "Detect_faces": [
                                      "Succeeded"
                                    ]
                                  },
                                  "description": "There may be multiple faces in the provided image so we need to process each of them."
                                },
                                "Set_variable": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "BitUserId",
                                    "value": "@body('Parse_JSON_2')?['id']"
                                  },
                                  "runAfter": {
                                    "Parse_JSON_2": [
                                      "Succeeded"
                                    ]
                                  }
                                }
                              },
                              "runAfter": {
                                "Load_person_'name'_for_the_user_selected_as_Bit": [
                                  "Succeeded"
                                ]
                              },
                              "description": "Will only run once as we have limited match responses to 1 in previous action."
                            }
                          },
                          "runAfter": {
                            "Parse_JSON": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Create_log_message_for_incorrect_game_level_entry": {
                                "type": "Compose",
                                "inputs": {
                                  "id": "@{guid()}",
                                  "reqid": "@{variables('RequestIdentifier')}",
                                  "postedby": "@{triggerBody()?['UserDetails']?['UserName']}",
                                  "status": "incorrect_game_level"
                                },
                                "runAfter": {}
                              },
                              "Create_or_update_document": {
                                "type": "ApiConnection",
                                "inputs": {
                                  "host": {
                                    "connection": {
                                      "name": "@parameters('$connections')['documentdb']['connectionId']"
                                    }
                                  },
                                  "method": "post",
                                  "body": "@outputs('Create_log_message_for_incorrect_game_level_entry')",
                                  "path": "/dbs/@{encodeURIComponent('bitcore')}/colls/@{encodeURIComponent('playattempts')}/docs"
                                },
                                "runAfter": {
                                  "Create_log_message_for_incorrect_game_level_entry": [
                                    "Succeeded"
                                  ]
                                }
                              }
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Parse_JSON_3": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Create_log_message_for_unconfirmed_user": {
                            "type": "Compose",
                            "inputs": {
                              "id": "@{guid()}",
                              "reqid": "@{variables('RequestIdentifier')}",
                              "postedby": "@{triggerBody()?['UserDetails']?['UserName']}",
                              "status": "user_not_confirmed"
                            },
                            "runAfter": {}
                          },
                          "Write_log_message_for_unconfirmed_user_to_DB": {
                            "type": "ApiConnection",
                            "inputs": {
                              "host": {
                                "connection": {
                                  "name": "@parameters('$connections')['documentdb']['connectionId']"
                                }
                              },
                              "method": "post",
                              "body": "@outputs('Create_log_message_for_unconfirmed_user')",
                              "path": "/dbs/@{encodeURIComponent('bitcore')}/colls/@{encodeURIComponent('playattempts')}/docs"
                            },
                            "runAfter": {
                              "Create_log_message_for_unconfirmed_user": [
                                "Succeeded"
                              ]
                            }
                          }
                        }
                      }
                    },
                    "Parse_JSON_3": {
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('Try_and_find_user_in_registration_database')",
                        "schema": {
                          "type": "object",
                          "properties": {
                            "personid": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "confirmed": {
                              "type": "boolean"
                            },
                            "byteround": {
                              "type": "integer"
                            },
                            "reqid": {
                              "type": "string"
                            },
                            "_rid": {
                              "type": "string"
                            },
                            "_self": {
                              "type": "string"
                            },
                            "_etag": {
                              "type": "string"
                            },
                            "_attachments": {
                              "type": "string"
                            },
                            "_ts": {
                              "type": "integer"
                            }
                          }
                        }
                      },
                      "runAfter": {}
                    }
                  },
                  "runAfter": {
                    "Try_and_find_user_in_registration_database": [
                      "Succeeded",
                      "Failed"
                    ]
                  },
                  "else": {
                    "actions": {
                      "Create_log_message_for_unregistered_user": {
                        "type": "Compose",
                        "inputs": {
                          "id": "@{guid()}",
                          "reqid": "@{variables('RequestIdentifier')}",
                          "postedby": "@{triggerBody()?['UserDetails']?['UserName']}",
                          "status": "user_not_registered"
                        },
                        "runAfter": {}
                      },
                      "Write_log_message_for_unregistered_user_to_DB": {
                        "type": "ApiConnection",
                        "inputs": {
                          "host": {
                            "connection": {
                              "name": "@parameters('$connections')['documentdb']['connectionId']"
                            }
                          },
                          "method": "post",
                          "body": "@outputs('Create_log_message_for_unregistered_user')",
                          "path": "/dbs/@{encodeURIComponent('bitcore')}/colls/@{encodeURIComponent('playattempts')}/docs"
                        },
                        "runAfter": {
                          "Create_log_message_for_unregistered_user": [
                            "Succeeded"
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "runAfter": {
                "Initialise_Tweet_media_URL_variable": [
                  "Succeeded"
                ]
              },
              "else": {
                "actions": {
                  "Create_log_message_for_no_media_error": {
                    "type": "Compose",
                    "inputs": {
                      "id": "@{guid()}",
                      "reqid": "@{variables('RequestIdentifier')}",
                      "postedby": "@{triggerBody()?['UserDetails']?['UserName']}",
                      "status": "no_tweet_media"
                    },
                    "runAfter": {}
                  },
                  "Write_log_message_to_DB": {
                    "type": "ApiConnection",
                    "inputs": {
                      "host": {
                        "connection": {
                          "name": "@parameters('$connections')['documentdb']['connectionId']"
                        }
                      },
                      "method": "post",
                      "body": "@outputs('Create_log_message_for_no_media_error')",
                      "path": "/dbs/@{encodeURIComponent('bitcore')}/colls/@{encodeURIComponent('playattempts')}/docs"
                    },
                    "runAfter": {
                      "Create_log_message_for_no_media_error": [
                        "Succeeded"
                      ]
                    }
                  }
                }
              }
            },
            "Create_document_for_logging": {
              "type": "Compose",
              "inputs": {
                "id": "@{guid()}",
                "reqid": "@{variables('RequestIdentifier')}",
                "postedby": "@{triggerBody()?['UserDetails']?['UserName']}",
                "postbody": "@{triggerBody()?['TweetText']}",
                "status": "initial_request"
              },
              "runAfter": {
                "Initialise_Tweet_media_URL_variable": [
                  "Succeeded"
                ]
              }
            },
            "Log_raw_tweet_to_Cosmos": {
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['documentdb']['connectionId']"
                  }
                },
                "method": "post",
                "body": "@outputs('Create_document_for_logging')",
                "path": "/dbs/@{encodeURIComponent('bitcore')}/colls/@{encodeURIComponent('playattempts')}/docs"
              },
              "runAfter": {
                "Create_document_for_logging": [
                  "Succeeded"
                ]
              }
            },
            "Initialise_Request_Unique_Identifier_variable": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "RequestIdentifier",
                    "type": "String",
                    "value": "@{guid()}"
                  }
                ]
              },
              "runAfter": {
                "Initialise_Bit_User_ID_variable": [
                  "Succeeded"
                ]
              }
            },
            "Initialise_Face_Filename_variable": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "UploadedFaceFileName",
                    "type": "String"
                  }
                ]
              },
              "runAfter": {
                "Initialise_Request_Unique_Identifier_variable": [
                  "Succeeded"
                ]
              }
            },
            "Initialise_Tweet_media_URL_variable": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "TweetMediaURL",
                    "type": "String"
                  }
                ]
              },
              "runAfter": {
                "Initialise_Face_Filename_variable": [
                  "Succeeded"
                ]
              }
            },
            "Initialise_Bit_User_ID_variable": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "BitUserId",
                    "type": "String"
                  }
                ]
              },
              "runAfter": {}
            }
          },
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "When_a_new_tweet_is_posted": {
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['twitter_1']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/onnewtweet",
                "queries": {
                  "searchQuery": "#IFoundBit"
                }
              },
              "recurrence": {
                "frequency": "Second",
                "interval": 30
              },
              "splitOn": "@triggerBody()?['value']"
            }
          },
          "contentVersion": "1.0.0.0",
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "documentdb": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('logicAppLocation'), '/managedApis/', 'documentdb')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('documentdb_1_Connection_Name'))]",
                "connectionName": "[parameters('documentdb_1_Connection_Name')]"
              },
              "faceapi": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('logicAppLocation'), '/managedApis/', 'faceapi')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('faceapi_1_Connection_Name'))]",
                "connectionName": "[parameters('faceapi_1_Connection_Name')]"
              },
              "servicebus_1": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('logicAppLocation'), '/managedApis/', 'servicebus')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('servicebus_1_Connection_Name'))]",
                "connectionName": "[parameters('servicebus_1_Connection_Name')]"
              },
              "twitter_1": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('logicAppLocation'), '/managedApis/', 'twitter')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('twitter_1_Connection_Name'))]",
                "connectionName": "[parameters('twitter_1_Connection_Name')]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', parameters('documentdb_1_Connection_Name'))]",
        "[resourceId('Microsoft.Web/connections', parameters('faceapi_1_Connection_Name'))]",
        "[resourceId('Microsoft.Web/connections', parameters('servicebus_1_Connection_Name'))]",
        "[resourceId('Microsoft.Web/connections', parameters('twitter_1_Connection_Name'))]"
      ]
    },
    {
      "type": "MICROSOFT.WEB/CONNECTIONS",
      "apiVersion": "2016-06-01",
      "name": "[parameters('twitter_1_Connection_Name')]",
      "location": "[parameters('logicAppLocation')]",
      "properties": {
        "api": {
          "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('logicAppLocation'), '/managedApis/', 'twitter')]"
        },
        "displayName": "[parameters('twitter_1_Connection_DisplayName')]"
      }
    },
    {
      "type": "MICROSOFT.WEB/CONNECTIONS",
      "apiVersion": "2016-06-01",
      "name": "[parameters('documentdb_1_Connection_Name')]",
      "location": "[parameters('logicAppLocation')]",
      "properties": {
        "api": {
          "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('logicAppLocation'), '/managedApis/', 'documentdb')]"
        },
        "displayName": "[parameters('documentdb_1_Connection_DisplayName')]",
        "parameterValues": {
          "databaseAccount": "[parameters('documentdb_1_databaseAccount')]",
          "accessKey": "[parameters('documentdb_1_accessKey')]"
        }
      }
    },
    {
      "type": "MICROSOFT.WEB/CONNECTIONS",
      "apiVersion": "2016-06-01",
      "name": "[parameters('azureblob_1_Connection_Name')]",
      "location": "[parameters('logicAppLocation')]",
      "properties": {
        "api": {
          "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('logicAppLocation'), '/managedApis/', 'azureblob')]"
        },
        "displayName": "[parameters('azureblob_1_Connection_DisplayName')]",
        "parameterValues": {
          "accountName": "[parameters('azureblob_1_accountName')]",
          "accessKey": "[parameters('azureblob_1_accessKey')]"
        }
      }
    },
    {
      "type": "MICROSOFT.WEB/CONNECTIONS",
      "apiVersion": "2016-06-01",
      "name": "[parameters('faceapi_1_Connection_Name')]",
      "location": "[parameters('logicAppLocation')]",
      "properties": {
        "api": {
          "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('logicAppLocation'), '/managedApis/', 'faceapi')]"
        },
        "displayName": "[parameters('faceapi_1_Connection_DisplayName')]",
        "parameterValues": {
          "apiKey": "[parameters('faceapi_1_apiKey')]",
          "siteUrl": "[parameters('faceapi_1_siteUrl')]"
        }
      }
    },
    {
      "type": "MICROSOFT.WEB/CONNECTIONS",
      "apiVersion": "2016-06-01",
      "name": "[parameters('servicebus_1_Connection_Name')]",
      "location": "[parameters('logicAppLocation')]",
      "properties": {
        "api": {
          "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('logicAppLocation'), '/managedApis/', 'servicebus')]"
        },
        "displayName": "[parameters('servicebus_1_Connection_DisplayName')]",
        "parameterValues": {
          "connectionString": "[parameters('servicebus_1_connectionString')]"
        }
      }
    }
  ],
  "outputs": {}
}